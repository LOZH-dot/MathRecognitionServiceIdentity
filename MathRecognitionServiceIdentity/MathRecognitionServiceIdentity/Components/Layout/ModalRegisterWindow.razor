@using System.Text.RegularExpressions
@inject IStringLocalizer<ModalRegisterWindow> _localizer

<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog py-5">
        <div class="modal-content">
            <div class="modal-header position-relative">
                <h4 class="modal-title position-absolute start-50 top-50 translate-middle my-3" style="background-color: white;">@_localizer["signUpLabel"]</h4>
                @*
                    Крестик (закрыть окно)
                *@
                <button type="button" class="close position-absolute top-50 end-0 translate-middle-y mx-1 rounded px-2 py-0" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body container">
                <div class="col justify-content-center p-3">
                    <div class="row-auto position-relative">
                        <div class="w-50 mx-auto py-2">
                            @*
                            Имя пользователя
                            *@
                            <input type="text" style="width: 100%;" placeholder="@_localizer["login"]" @bind="login"/>
                        </div>
                    </div>
                    <div class="row-auto position-relative">
                        <div class="w-50 mx-auto py-2">
                            @*
                            Почта
                            *@
                            <input type="text" style="width: 100%;" placeholder="@_localizer["email"]" @bind="email"/>
                        </div>
                    </div>
                    <div class="row-auto position-relative">
                        <div class="w-50 mx-auto py-2">
                            @*
                            Пароль
                            *@
                            <input type="text" style="width: 100%;" placeholder="@_localizer["password"]" @bind="password"/>
                        </div>


                        @if (isIncorrectLogin)
                        {
                        <div class="alert alert-danger my-2" role="alert">
                                @_localizer["incorrectLoginError"]
                        </div>
                        } else if (isIncorrectEmail)
                        {
                            <div class="alert alert-danger my-2" role="alert">
                                @_localizer["incorrectEmailError"]
                            </div>
                        } else if (isIncorrectEmailView)
                        {
                            <div class="alert alert-danger my-2" role="alert">
                                @_localizer["incorrectEmailViewError"]
                            </div>
                        }
                        else if (isIncorrectPassword)
                        {
                            <div class="alert alert-danger my-2" role="alert">
                                @_localizer["incorrectPasswordError"]
                            </div>
                        }


                    </div>
                    <div class="row-auto position-relative">
                        <div class="w-50 mx-auto py-2 position-relative">
                            @*
                            Войти
                            *@
                            <button type="button" class="btn btn-outline-secondary position-absolute start-50 top-50 translate-middle-x" @onclick=@ModalOk>@_localizer["signUpButton"]</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer my-2" style="flex-direction:column;">
                <p>@_localizer["hasAccount"] <a href="" @onclick="ModalLoginCall">@_localizer["signIn"]</a></p>
            </div>
        </div>
    </div>
</div>

@code {
    private string login = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;

    private bool isIncorrectLogin = false;
    private bool isIncorrectEmail = false;
    private bool isIncorrectEmailView = false;
    private bool isIncorrectPassword = false;

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<bool> OnLoginCall { get; set; }

    private EventCallback<bool> OnIncorrectInfo { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        if (!ValidateData()) return OnIncorrectInfo.InvokeAsync(true);

        return OnClose.InvokeAsync(true);
    }

    private Task ModalLoginCall()
    {
        return OnLoginCall.InvokeAsync(false);
    }


    private bool ValidateData()
    {
        bool validateComplete = true;
        Regex regex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$");
        Match match = regex.Match(email);

        ResetValidateNotifications();

        if (string.IsNullOrWhiteSpace(login))
        {
            isIncorrectLogin = true;
            validateComplete = false;
        }
        if (string.IsNullOrWhiteSpace(password))
        {
            isIncorrectPassword = true;
            validateComplete = false;
        }
        if (string.IsNullOrWhiteSpace(email))
        {
            isIncorrectEmail = true;
            validateComplete = false;
        }
        if (!match.Success)
        {
            isIncorrectEmailView = true;
            validateComplete = false;
        }

            return validateComplete;
    }

    private void ResetValidateNotifications()
    {
        isIncorrectLogin = false;
        isIncorrectEmail = false;
        isIncorrectPassword = false;
        isIncorrectEmailView = false;
    }
}
