@implements IDisposable

@inject IStringLocalizer<NavMenu> _localizer
@inject NavigationManager NavigationManager;
@rendermode InteractiveServer

<nav class="navbar navbar-expand-lg navbar-dark bg-dark py-3 position-relative">
    <div class="container-xxl d-flex align-items-md-center">
        <div class="">
            <a class="navbar-brand ms-3 brand" href="/">@_localizer["brand"]</a>
        </div>
        <AuthorizeView>
            <NotAuthorized>
                <div class="container">
                    <button type="button" class="btn btn-primary ms-3" @onclick="() => RedirectToLoginPage()">@_localizer["signIn"]</button>
                    <button type="button" class="btn btn-light ms-2" @onclick="() => RedirectToRegisterPage()">@_localizer["signUp"]</button>
                </div>
            </NotAuthorized>
            <Authorized>
            <div>
                <a class="navbar-brand">@context.User.Identity.Name</a>
            </div>
            <div class="nav-item px-3">
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="btn btn-danger">Выйти</button>
                </form>
            </div>
            </Authorized>
        </AuthorizeView>
@*         <div class="container">
            <MathRecognitionServiceIdentity.Components.Shared.CultureSelector />
        </div> *@
    </div>
</nav>


@code {
    private string? currentUrl;

    private void RedirectToLoginPage()
    {
        NavigationManager.NavigateTo($"/Account/Login", forceLoad: true);
    }

    private void RedirectToRegisterPage()
    {
        NavigationManager.NavigateTo($"/Account/Register", forceLoad: true);
    }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}