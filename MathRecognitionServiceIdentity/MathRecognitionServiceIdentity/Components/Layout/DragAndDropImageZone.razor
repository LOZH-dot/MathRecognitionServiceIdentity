@using BlazorInputFile
@using System.Globalization
@using System.Diagnostics
@using System
@using System.IO
@using MathRecognitionServiceIdentity.Data
@using MathRecognitionServiceIdentityDB.Data.MathRecognitionServiceIdentity
@using Microsoft.AspNetCore.Hosting

@inject IStringLocalizer<DragAndDropImageZone> _localizer
@inherits OwningComponentBase<RecognitionService>
@rendermode InteractiveServer

<div class="dropzone @dropClass rounded">
	<BlazorInputFile.InputFile id="fileInput" multiple title=""
							   OnChange="SingleUpload"
							   accept="image/png,image/gif,image/jpeg"
							   @ondragenter="HandleDragEnter"
							   @ondragleave="HandleDragLeave" />
    <p class="text-center">@_localizer["test"]</p>
</div>

@if (showResultWindow)
{
    <ModalResultWindow OnClose="ResetResultWindow" Result="@result"></ModalResultWindow>
}

@if ((fileTypeError || fileSizeError || singleUploadError))
{
		@if (fileTypeError)
		{
			<div class="alert alert-danger my-2">
            @_localizer["fileTypeError"]
            </div>
		}
		@if (singleUploadError)
		{
            <div class="alert alert-danger my-2">
            @_localizer["singleUploadError"]
            </div>
		}
		@if (fileSizeError)
		{
            <div class="alert alert-danger my-2">
            @_localizer["fileSizeError"] @MaxFileSizeMB MB.
            </div>
		}
}
@if (selectedFiles != null && selectedFiles.Count > 0)
{
    <div class="col-12">
		<ul>
			@foreach (var file in selectedFiles)
			{
				<li>
					@file.Name
					<button class="btn btn-link text-danger p-0 pl-1" type="button"
							@onclick="@(e => RemoveFile(file))">
						<small class="align-text-bottom">Удалить</small>
					</button>
				</li>
			}
		</ul>
        <div>
            <button class="btn btn-primary w-100" @onclick="@ShowResult">Распознать</button>
        </div>
	</div>
}
 
@code {
    const int MaxFileSizeMB = 5;
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024; // 5MB
    private string dropClass = "";
    private bool fileSizeError = false;
    private bool fileTypeError = false;
    private bool singleUploadError = false;
    private List<IFileListEntry> selectedFiles = new List<IFileListEntry>();
    private bool showResultWindow = false;
    private string result = "";

    private Recognition objRecognition = new Recognition();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<Recognition> recognitions = new List<Recognition>();
    private string UserIdentityName = "";

    async Task<string> GetResult(string path)
    {
        string progToRun = $"main.py {path}";
        char[] splitter = { '\r' };

        Process proc = new Process();
        proc.StartInfo.FileName = "python.exe";
        proc.StartInfo.RedirectStandardOutput = true;
        proc.StartInfo.UseShellExecute = false;

        // call hello.py to concatenate passed parameters
        proc.StartInfo.Arguments = string.Concat(progToRun);
        proc.Start();

        StreamReader sReader = proc.StandardOutput;
        string[] output = sReader.ReadToEnd().Split(splitter);

        proc.WaitForExit();

        string result = output[output.Length - 2];
        return result;
    }

    private async void ShowResult()
    {

        foreach (var file in selectedFiles)
        {
            var path = "wwwroot\\uploads\\" + Guid.NewGuid().ToString() + "." + file.Name.Split('.')[1];


            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            using (FileStream newFile = new FileStream(path, FileMode.Create, FileAccess.Write))
            {
                ms.WriteTo(newFile);
                ShowResultWindow();
            }
            result = await GetResult(path);

            SaveRecognition(path, result);
            StateHasChanged();
        }
    }

    private void ShowResultWindow()
    {
        showResultWindow = true;
    }

    private void ResetResultWindow()
    {
        showResultWindow = false;
    }

    private void HandleDragEnter()
    {
        dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task SingleUpload(IFileListEntry[] files)
    {
        dropClass = "";
        fileSizeError = false;
        fileTypeError = false;
        singleUploadError = false;

        List<string> acceptedFileTypes = new List<string>() { "image/png", "image/jpeg", "image/gif" };
        if (files != null)
        {
            if (files.Length > 1 || selectedFiles.Count > 0) // Нельзя загрузить больше одного файла за раз
            {
                singleUploadError = true;
                return;
            }

            foreach (var file in files)
            {

                bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    fileSizeError = true;
                }

                if (!acceptedFileTypes.Contains(file.Type))
                {
                    error = true;
                    fileTypeError = true;
                }


                //keep the good files
                if (!error)
                {
                    selectedFiles.Add(file);
                }
            }
        }
    }

    private void RemoveFile(IFileListEntry file)
    {
        selectedFiles.Remove(file);
    }

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
        // Get the forecasts for the current user
        // We access WeatherForecastService using @Service
        //recognitions = await @Service.GetRecognitionAsync(UserIdentityName);
        //Console.WriteLine(recognitions.Count);
    }

    // Добавление нового распознавания
    private void SaveRecognition(string path, string json)
    {
        Recognition objNewRecognition = new Recognition();
        objNewRecognition.UserName = UserIdentityName == "" ? null : UserIdentityName;
        objNewRecognition.ImagePath = path;
        objNewRecognition.Json = json;
        objNewRecognition.DateTime = DateTime.Now;

        var result =
        @Service.CreateRecogntionAsync(objNewRecognition);
    }
}