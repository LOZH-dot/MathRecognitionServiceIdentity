@page "/history"
@using MathRecognitionServiceIdentityDB.Data.MathRecognitionServiceIdentity
@using MathRecognitionServiceIdentity.Data

@rendermode InteractiveServer
@inherits OwningComponentBase<RecognitionService>

<PageTitle>История</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (!loadingDone)
        {
            <div class="container">
                Загрузка...
            </div>
        }
        else
        {
            @if (recognitions.Count == 0)
            {
                <p class="col-12 text-center">Нет распознаваний!</p>
            }

            <div class="container">
                <div class="row">
                @foreach (var recognition in recognitions)
                {
                        @* Заявка *@
                        <div class="col-md-6 col-lg-4">
                            <div class="card my-3">

                                <img src="@recognition.ImagePath.Substring(7, recognition.ImagePath.Length - 7)" class="card-image-top" alt="thumbnail">
                                <div class="card-body text-center">
                                    <h3 class="card-title"><a class="text-secondary">Результат</a></h3>
                                    <p class="card-text">Дата и время проведения распознавания: @recognition.DateTime</p>
                                    <p class="card-text">Latex: @GetLatex(recognition.Json)</p>
                                    <p class="card-text">JSON: @GetJSON(recognition.Json)</p>
                                    @* <button class="btn btn-primary">Получить результат</button> *@
                                </div>
                            </div>
                        </div>
                }
                </div>
            </div>

        }
    </Authorized>
    <NotAuthorized>
        Вы не можете просмотреть историю запросов!
    </NotAuthorized>
</AuthorizeView>


@code {
    private bool loadingDone = false;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    List<Recognition> recognitions = new List<Recognition>();
    private string UserIdentityName = "";

    private Parsers.Parse parse = new();

    private string GetLatex(string str) => parse.LatexParse(str);
    private string GetJSON(string str) => parse.JSONParse(str);

    private async void loadHistory()
    {
        recognitions = await @Service.GetRecognitionAsync(UserIdentityName);
        loadingDone = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
                loadHistory();
            }
        }

        //recognitions = await @Service.GetRecognitionAsync(UserIdentityName);
    }
}
